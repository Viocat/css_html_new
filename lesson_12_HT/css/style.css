@import url(reset.css);
@import url(https://fonts.googleapis.com/css?family=Sono:200,300,regular,500,600,700,800);
body{
    font-family: "Sono";
    font-size: 24px;
    font-weight: 400;
    color: aliceblue;
    color: black;
}
.wrapper{
    display: block;
    overflow-x: clip;
}
div.items{
    display: block;
    width: 100%;
    text-align: left;
}
[class*="__container"]{
    width: 200px;
    height: 200px;
    background-color: rgba(0, 0, 0, 0.093);
    margin: 25px;
    display: inline-block;
    vertical-align: top;
}
[class*="__block"]{
   
    width: 200px;
    height: 200px;
    background: linear-gradient(135deg, hsla(130, 50%, 52%, 1) 23%, hsla(57, 100%, 58%, 1) 100%) hsla(130, 50%, 52%, 1);
    text-align: center;
    
    /* margin: 25px; */
}


/* ============================================-----

За допомогою transform (2D, 3D) ми можемо повертати, зрушувати, масштабувати і тд.
========================================================
                            transform:   ;

========================================================
                            transform: функция(ии)-значения свойства;

    НЕ РАБОТАЕТ СО СТРОЧНЫМИ ЕЛЕМЕНТАМИ

*/

/* 
функции:
============================================
                  translate(x,y)
============================================

1)      - перемещает обьект на новое место по указаннім координатам
относительно изначального местоположения обьекта.

зміщення не впливає на оточення. (схоже до position: relative;)

 */
.items {
    padding: 15px;
    background: none;
    text-align: justify;
}

.translate__container:hover .translate__block{
    transform: translate(20px, 20px);
    /* transform: translate(-20px, -20px); */
    /* transform: translateX(35px); */
    /* transform: translateY(35px); */

    /* transform: translate(10%, 10%); */
    /* % берётся от размера самого элемента */
    /* x- от ширины, y - от высоты элемента ! */
 


    /* для сравнения: */
    /*
    position: relative;
    top: 20px;
    left: 20px; 
     */
     /*
      различие:
     transform - не включает z-index!
     */
     transition: all 0.7s;
}



/*============================================
                    scale
============================================*/
/*
МАСШТАБИРУЕТ ЭЛЕМЕНТЫ:

1 - начальный размер элемента.

изменение не влияет на соседние элементы
*/

.scale__container:hover .scale__block{
    transform: scale(2); /* в 2 раза больше*/
      transform: scale(0.5);/* половина размера*/
    /*transform: scale(1); изначальный размер*/
    /* тоесть фактический размер * на значение указанное в scale */
    transition: all 0.7s;
}

/* можно задавать отдельно значения для ширины и высоты scale(x,y) */
.scale-x-y__container:hover .scale-x-y__block{
    transform: scale(1,0.5); /* (ширина (x) - 1, а высота (у) - меньше в половину)*/
     /*  transform: scale(1);
     изначальный размер*/
     transition: all 0.7s;
}

/* зеркально отобразить по горизонтали: */
.scale-mirror-x__container:hover .scale-mirror-x__block{
    transform: scale(-1, 1) ; /*(отрицательное значение по оси x - перевернёт картинку по горизонтали)*/
    transition: all 2s;
}

/* зеркально по вертикали:  */
.scale-mirror-y__container:hover .scale-mirror-y__block{

transform: scale(1, -1);
transition: all 2s;
}

/*============================================
             rotate: (знячение deg);         
==============================================*/

/* вращение */
.rotate__container:hover .rotate__block{
    transform: rotate(360deg);
    transition: all 4s;
}


/* вращение по оси Х . */

.rotate-y__continer{
    perspective: 100px;
}

.rotate-x__continer:hover .rotate-x__block{
    transform: rotateX(50deg);
    /* Ось проходит по центру */
    transition: all 0.4s;
}

/* вращение по оси Y */
.rotate-y__container:hover .rotate-y__block{
    transform: rotateY(360deg);
    /* Ось проходит по цнтру обьекта */
    transition: all 4s;
}


/*============================================
             skew: (x+deg, y+deg);         
==============================================*/

/* деформирует, наклоняет єлемент */

.skew__container:hover .skew__block{
    transform: skew(10deg, 0deg);
    transition: all 0.4s;
}

/*============================================
             matrix: (a, b, c, d, x, y);         
==============================================*/

/* обьединяет несколько трансформаций в 1  */

/* почитать отдельно */
.matrix__container:hover .matrix__block{
    transform: matrix(1, 0, 0, 1,0 ,0);
    transition: all 0.4s;
}

.text{
    display: block;
    text-align: center;
    width: 100%;
    background: none;
}

/*============================================
             multi: func( ) func( ) func( ) func( )...;         
==============================================*/

/* вместо matrix (более понятный вариант) */

.multi__container:hover .multi__block{
    transform: translate(50px, 50px) scale(0.5) rotate(45deg);
    transition: all 0.5s;
    background: aqua;
}


/*============================================
            TRANSFORM ORIGIN : x y;        
==============================================*/

/* СМЕЩЕНИЕ ТОЧКИ ОТНОСИТЕЛЬНО КОТОРОЙ ПРОИЗВОДИТСЯ ТРАНСФОРМАЦИЯ */
/* для координат можно использовать слова, %, px */


.transform-origin__block{
    transform-origin: 100% 50%; /*задали точку относительно которой будет произвд'н поворот обьекта*/
    transform: rotate(0deg);
}

.transform-origin__container:hover .transform-origin__block{
    transform: rotate(-30deg);
    transition: all 0.4s;

}

/* по умолчанию Точка, относительно которой проиходит трансформация - по центру: */

.origin-default__block {
    transform: rotate(0deg);
}
.origin-default__container:hover .origin-default__block {
    transform: rotate(-30deg);
    transition: all 0.4s;
}

/* 

                 3D

 */
 /*============================================
            perspective: ; , perspective-origin: ;       
==============================================*/
/* 
1) - устанавливет глубину перспективы( % - писать нельзя )
2) - изменет точку начаа координат

!!!  Задаётся РОДИТЕЛЮ, а не самому элементу !!!
*/

.perspective__container{
    perspective: 300px;
    /* чем меньше значение тем более ярко выражена перспектива */
}

.perspective__container:hover .perspective__block {
    /* transform: rotateX(50deg); */
     /* тут просто покрутили (перспективы нет)
     надо задать родителю перспективу
     */
     transform: rotateX(50deg);
    transition: all 0.5s;
}

.perspective-origin__container {
    perspective: 300px;
    perspective-origin: 50%;
    /* по умолчанию = center или 50% */

    /* изменим: */
    perspective-origin: 10px;
}
.perspective-origin__container:hover .perspective-origin__block {
    transform: rotateX(50deg);
    transition: all 0.5s;
}

 /*============================================
               TRANSFORM 3D      
==============================================*/
/* 

transform: translate3D(x,y,z); !! Ось Z не работает если родителю 
                                    не задана перспектива!! 
                                    z-параметр типа отодвигает от дрителя обькт
                                    (визуально уменьшает как scale)
           scale3D(x,y,z);

           skew3d(x,y,z);

           rotate3d(x,y,z);

*/
.translate-3D__container{
    perspective: 400px;
}
.translate-3D__block {
    transform: translate3D(0, 0, 0);
}
.translate-3D__container:hover .translate-3D__block {
    transform: translate3D(20px, 20px, 100px);
    transition: all 0.5s;
}

